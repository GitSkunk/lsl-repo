
;; This program is free software: you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see
;; <http://www.gnu.org/licenses/>.


;; To use the lsl-mode, make a directory ~/emacs and copy
;; lsl-mode.el into that directory.  Start emacs and then M-x
;; byte-compile-file ~/emacs/lsl-mode.el.  This will create
;; lsl-mode.elc.
;;
;; You may want to customize the font-lock-warning-face (M-x
;; customize-face font-lock-warning-face).  The entry for it in your ~/.emacs
;; might look like this (without the comments) when you save the customization:
;;
;;
;; (custom-set-faces
;;  ;; custom-set-faces was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  '(default ((t (:inherit nil :stipple nil :background "black" :foreground "green" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 120 :width normal :foundry "Gohu" :family "GohuFont"))))
;;  '(font-lock-warning-face ((t (:inherit error :foreground "DarkSlateGray1")))))
;;
;;
;; To use the lsl-mode, add the following to your ~/.emacs file:
;;

(load "~/emacs/lsl-mode.elc")
(setq auto-mode-alist
       (nconc
         '(("\\.lsl$" . lsl-mode))
         auto-mode-alist))

(defun my-reload-lsl ()
  "Reload lsl mode"
  (interactive)
  (unload-feature 'lsl-mode)
  (load "~/emacs/lsl-mode.elc")
)


;;
;; You may want to customize the indentation:
;;


(setq-default c-basic-offset 8
	      tab-width 8
	      indent-tabs-mode t
	      c-default-style "gnu")


;;
;; 'goto-matching-fence' is a very useful function you may want to add
;; to your ~/.emacs (if it doesnÂ´t finally come by default):
;;
(defun goto-matching-fence ()
  (interactive)
  (let (pos dir (mismatch t) (oldpos (point)))
    (cond ((eq (char-syntax (following-char)) ?\))
	   (setq dir -1)
	   (setq oldpos (+ oldpos 1)))
	  ((eq (char-syntax (following-char)) ?\()
	   (setq dir 1)))
    (if dir
	(progn
	  (save-excursion
	    (save-restriction
              ;; Scan across one sexp within that range.
	      (condition-case ()
		  (setq pos (scan-sexps oldpos dir))
		(error nil))
              ;; See if the "matching" paren is the right kind of paren
              ;; to match the one we started at.
	      (if pos
		  (let ((beg (min pos oldpos)) (end (max pos oldpos)))
		    (and (/= (char-syntax (char-after beg)) ?\$)
			 (setq mismatch
			       (not (eq (char-after (1- end))
                                        ;; This can give nil.
					(matching-paren (char-after beg))))))))
	      )
	    )
	  )
      )
    ;; If they don't properly match, use a different face,
    ;; or print a message.
    (if mismatch
	(message "Paren mismatch")
      (progn (push-mark)
	     (cond ((eq dir 1)
		    (goto-char (- pos 1)))
		   ((eq dir -1)
		    (goto-char pos))))
      )
    )
)


;;
;; Another thing you might want is to automatically start the emacs
;; server process.  To do that, put the following into your ~/.emacs:
;;
(server-start)
;;
;; This starts the server process and allows you to use emacsclient
;; instead of starting another instance of emacs every time.  Using
;; emacsclient can be a lot faster than starting emacs.  I start emacs
;; only once after rebooting every couple months and have it running
;; all the time.  About 450 buffers are re-created on startup through
;; emacs DeskTop (see http://www.emacswiki.org/emacs/DeskTop), which
;; can take a while. Visiting a file via emacsclient shows the file
;; instantly.
